{"version":3,"sources":["keyboardCat.gif","hello.gif","keyboard.png","utils/words.js","hooks/useKeyPress.js","utils/time.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","texts","useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","currentTime","Date","getTime","initialWords","num","Math","floor","random","generate","console","log","block","joinJamo","s1","s2","initial","c1","indexOf","includes","App","Array","fill","join","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","charAt","currentChar","setCurrentChar","substr","incomingChars","setIncomingChars","startTime","setStartTime","wordCount","setWordCount","wpm","setWpm","setAccuracy","typedChars","setTypedChars","numBackSp","checker","updatedOutgoingChars","updatedIncomingChars","keyStroke","engl","romanToHangul","joinHangul","s","middle","final","c2","f","String","fromCharCode","c3","substring","durrationInMinutes","toFixed","path","exact","render","className","width","src","cat","alt","hello","type","to","keyboard","slice","onClick","location","reload","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.faf89bd0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/keyboardCat.e9351507.gif\";","module.exports = __webpack_public_path__ + \"static/media/hello.d098f83d.gif\";","module.exports = __webpack_public_path__ + \"static/media/keyboard.d751b81d.png\";","const texts = [\n    '실례합니다. 서울역에 어떻게 가요? 저기에서 163번 버스를 타세요. 서울역까지 얼마나 걸려요? 30분쯤 걸려요. 감사합니다.',\n    '저기요. 인사동에 어떻게 가요? 지하철 2호선을 타세요. 어디에서 내려요? 안국 역에서 내리세요. 감사합니다.',\n    '미에코 씨, 가방 샀어요? 네, 샀어요. 언제 샀어요? 3일 전에 샀어요.',\n    '앤디 씨, 월요일 학교에 갔어요? 아니요, 안 갔어요. 왜 안 갔어요? 아팠어요.',\n    '완 씨, 어제 뭐 했어요? 집에 있었어요. 집에서 뭐 했어요? 청소했어요. 그리고 요리도 했어요.',\n    '어서 오세요. 사과 좀 주세요? 얼마예요? 세 개에 5,000원이에요. 맛있어요? 네, 아주 맛있는 사과예요. 그럼 10,000원어치 주에요.',\n    '전자사전 점 보여 주세요. 전자사전요? 이거 어때요? 좀 커요. 작은 사전 없어요? 그럼, 이거 어때요? 좋아요. 이거 주세요.',\n\n];\n\nexport const generate = (count = 10) => {\n    let num = Math.floor(Math.random() * texts.length);\n    return texts[num];\n    /**\n    return new Array(count)\n        .fill()\n        .map(_ => faker.random.word())\n        .join(' ');\n     */\n};\n","\nimport { useState, useEffect } from 'react';\n\n//1\nconst useKeyPress = callback => {\n  //2\n  const [keyPressed, setKeyPressed] = useState();\n  //3\n  useEffect(() => {\n    //4\n    const downHandler = ({ key }) => {\n      if ((keyPressed !== key && key.length === 1) || key === \"Backspace\") {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    //5\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    //6\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      //7\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  //8\n  return keyPressed;\n};\n\nexport default useKeyPress;","export const currentTime = () => new Date().getTime();","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Link } from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\nimport './App.css';\nimport cat from './keyboardCat.gif';\nimport hello from './hello.gif';\nimport keyboard from './keyboard.png'\nimport { generate } from './utils/words';\nimport useKeyPress from './hooks/useKeyPress';\nimport { currentTime } from './utils/time';\n\nconst initialWords = generate();\n//const initialWords = \"와 원 있 안녕하세요! 타이핑 연습하자! 빨리 치고 싶어요... 시작 오늘은 가게에 가서 사과를 샀다. 아가 일이 감사합니다 ㅁㄴㅇㄹ ㅁㄴㅇ ㅁㄴㅇㄹ ㅁㄴㅇㄹ ㅁㄴㅇ ㅁㄴㅇㄹ ㅁㄴㅇㄹ ㅁㄴㅇ ㄹㅁㄴㅇ ㅁㄴㅇㄹ ㅁㄴㅇ ㄹㅁㄴㅇㄹ ㅁㄴㅇ ㄹㅁㄴㅇㄹ \"\nconsole.log(initialWords);\nlet block = '';\n\n\nfunction App() {\n  const [leftPadding, setLeftPadding] = useState(\n      new Array(20).fill(' ').join(''),\n  );\n  const [outgoingChars, setOutgoingChars] = useState('');\n  const [currentChar, setCurrentChar] = useState(initialWords.charAt(0));\n  const [incomingChars, setIncomingChars] = useState(initialWords.substr(1));\n  // Used for WPM\n  const [startTime, setStartTime] = useState();\n  const [wordCount, setWordCount] = useState(0)\n  const [wpm, setWpm] = useState(0)\n  // Used for Accuracy\n  const [accuracy, setAccuracy] = useState(0);\n  const [typedChars, setTypedChars] = useState('');\n  let numBackSp = 0;\n  let numTyped = 0;\n\n  let checker = '';\n\n  useKeyPress(key => {\n    numTyped++;\n\n    if (!startTime) {\n      setStartTime(currentTime());\n    }\n\n    let updatedOutgoingChars = outgoingChars;\n    let updatedIncomingChars = incomingChars;\n    if (key === \"Backspace\") {\n      block = block.substr(0, block.length-1);\n      numBackSp++;\n    }\n    else {\n      key = romanToHangul(key);\n      block += key;\n    }\n    console.log(\"Key: \" + key);\n    console.log(\"Block: \" + block);\n    checker = joinHangul(block);\n    console.log(\"Checker: \" + checker);\n\n    if (checker === currentChar) {\n      block = '';\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1));\n      }\n      if (incomingChars.charAt(0) === ' ') {\n        setWordCount(wordCount + 1);\n        const durrationInMinutes = (currentTime() - startTime) / 60000.0;\n        setWpm(((wordCount + 1) / durrationInMinutes).toFixed(2));\n      }\n\n      updatedOutgoingChars += currentChar;\n      setOutgoingChars(updatedOutgoingChars);\n\n      setCurrentChar(incomingChars.charAt(0));\n\n      updatedIncomingChars = incomingChars.substring(1);\n      /**\n      if (updatedIncomingChars.split(' ').length < 10) {\n        updatedIncomingChars += ' ' + generate();\n      }\n       **/\n      setIncomingChars(updatedIncomingChars);\n\n    }\n    // Accuracy is bugged for korean typing\n    const updatedTypedChars = typedChars + key;\n    if (key.length === 1) {\n      const updatedTypedChars = typedChars + key;\n      setTypedChars(updatedTypedChars);\n      //setAccuracy(((updatedOutgoingChars.length * 100) / updatedTypedChars.length).toFixed(2,),);\n      setAccuracy((100 - numBackSp), ); //((numTyped-numBackSp / numTyped).toFixed(2,));\n    }\n\n  });\n\n  return (\n      <Router>\n        <Route path=\"/\" exact render ={\n          ()=> {\n            return (\n                <div className=\"App\">\n                  <header className=\"App-header\">\n                    <p>\n                    Welcome to TypeKR! Let's practice typing in Korean!\n                  </p>\n                    <img className=\"gif-player\" width=\"500\" src={cat} alt=\"Keyboard Cat\"/>\n                    <p className=\"Character\">\n                      <img className=\"gif-player\" src={hello} alt=\"Welcome Text\"/>\n                    </p>\n                    <Link className=\"button\" type=\"button\" to=\"/play\">Let's Begin! </Link>\n                  </header>\n                </div>\n            )\n          }\n        }>\n        </Route>\n        <Route path=\"/play\" exact render ={\n          ()=> {\n            return (\n                <div className=\"App\">\n                  <header className=\"App-header\">\n                    <p>\n                      You may now begin typing! 시작!\n                    </p>\n                    <img className=\"gif-player\" src={keyboard} alt=\"Welcome Text\"/>\n                    <p className=\"Character\">\n                      <span className=\"Character-out\">\n                        {(leftPadding + outgoingChars).slice(-20)}\n                      </span>\n                      <span className=\"Character-current\">{currentChar}</span>\n                      <span>{incomingChars.substr(0, 20)}</span>\n                    </p>\n                    <h3>\n                      : { block }\n                    </h3>\n                    <h3>\n                      WPM: {wpm}\n                    </h3>\n                    <button className=\"button\" onClick={() => window.location.reload(false)}>New Passage</button>\n                  </header>\n                </div>\n            )\n          }\n        }>\n        </Route>\n\n      </Router>\n\n  );\n}\n\n/**\n * Takes a string of Jamo and attempts to create a valid Hangul syllable block\n * @param s - String of characters\n * @returns {string|*} - Syllable block in Hangul (Korean written language)\n */\nfunction joinHangul(s) {\n  const initialIndex = 588;\n  const medialIndex = 28;\n  const initial = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n  const middle = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'];\n  const final = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\n    'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n  if (s.length < 2) return s;\n\n  if (s.length == 2) {\n    let c1 = initial.indexOf(s.charAt(0));\n    let c2 = middle.indexOf(s.charAt(1));\n    let f = (c1 * 588) + (c2 * 28) + 44032;\n    let hangul = String.fromCharCode(f);\n    return hangul;\n  }\n\n  if (s.length == 3) {\n    // Possibility 0: two consonants:\n    if (initial.includes(s.charAt(1))) {\n      let c1 = initial.indexOf(s.charAt(1)) + 1;\n      let c2 = middle.indexOf(s.charAt(2));\n      let f = (c1 * 588) + (c2 * 28) + 44032;\n      let hangul = String.fromCharCode(f);\n      return hangul;\n    }\n    // Possibility 1: two vowels ex: 외\n    if (middle.includes(s.charAt(2))) {\n      let c1 = initial.indexOf(s.charAt(0));\n      let c2 = joinJamo(s.charAt(1), s.charAt(2));\n      c2 = middle.indexOf(c2);\n      let f = (c1 * 588) + (c2 * 28) + 44032;\n      let hangul = String.fromCharCode(f);\n      return hangul;\n    }\n    // Possibility 2: single batchim ex: 일\n    if (initial.includes(s.charAt(0)) && middle.includes(s.charAt(1)) && final.includes(s.charAt(2))) {\n      let c1 = initial.indexOf(s.charAt(0));\n      let c2 = middle.indexOf(s.charAt(1));\n      let c3 = final.indexOf(s.charAt(2));\n      let f = (c1 * 588) + (c2 * 28) + c3 + 44032;\n      let hangul = String.fromCharCode(f);\n      return hangul;\n    }\n  }\n  // Add Check for possible size 4: ex: 없 entered as ㅇ ㅓ ㅂ ㅅ\n  if (s.length === 4) {\n    // Possibility 0: single initial, single middle, double final ex: 없\n    if (initial.includes(s.charAt(2)) && initial.includes(s.charAt(3))) {\n      let c1 = initial.indexOf(s.charAt(0));\n      let c2 = middle.indexOf(s.charAt(1));\n      let c3 = joinHangul(s.charAt(2), s.charAt(3));\n      c3 = final.indexOf(c3) + 1; // add one since final\n      let f = (c1 * 588) + (c2 * 28) + c3 + 44032;\n      let hangul = String.fromCharCode(f);\n      return hangul;\n    }\n    // Possibility 1: single initial, double middle, single final: 원 ㅇ ㅜ ㅓ ㄴ\n    if (middle.includes(s.charAt(1)) && middle.includes(s.charAt(2))) {\n      let c1 = initial.indexOf(s.charAt(0));\n      let c2 = joinJamo(s.charAt(1), s.charAt(2));\n      c2 = middle.indexOf(c2);\n      let c3 = final.indexOf(s.charAt(3));\n      let f = (c1 * 588) + (c2 * 28) + c3 + 44032;\n      let hangul = String.fromCharCode(f);\n      return hangul;\n    }\n    // Possibility 2: double initial added manually: ㅃ typed as ㅂㅂ\n    // come back to fix later, since this condition only occurs with improper typing technique\n }\n\n  return s;\n}\n\n/**\n * Takes to Jamo Characters and checks if they can be combined into one Hangul char.\n * @param s1 - The first char to be merged\n * @param s2 - The second char to be merged\n * @returns {string|*|string} - Single Hangul block\n */\nfunction joinJamo(s1, s2) {\n  const initial = ['ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n  const middle = ['ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'];\n  const final = ['', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\n    'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n  const m1 = ['ㅘ', 'ㅙ', 'ㅚ'];\n  const m1_1 = ['ㅏ', 'ㅐ', 'ㅣ'];\n  const m2 = ['ㅝ', 'ㅞ', 'ㅟ'];\n  const m2_1 = ['ㅓ', 'ㅔ', 'ㅣ'];\n\n  const f1 = ['ㄳ', 'ㄵ'];\n  const f1_1 = ['ㅅ', 'ㅈ'];\n  const f2 = ['ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ'];\n  const f2_1 = ['ㄹ', 'ㅁ', 'ㅂ', 'ㅅ', 'ㅌ', 'ㅍ', 'ㅎ'];\n\n  // same double start or end\n  if (s1 === s2) {\n    let c1 = initial.indexOf(s1) + 1;\n    return initial[c1];\n  }\n  // double middle: ㅘ, ㅙ, ㅚ, ㅝ, ㅞ, ㅟ, ㅢ;\n  else if(middle.includes(s1)) {\n    if (s1 === 'ㅗ') {\n      let c1 = m1_1.indexOf(s2);\n      return m1[c1];\n    }\n    if (s1 === 'ㅜ') {\n      let c1 = m2_1.indexOf(s2);\n      return m2[c1];\n    }\n    if (s1 === 'ㅡ' && s2 === 'ㅣ') {\n      return 'ㅢ';\n    }\n  }\n  // different double end: ㄳ, ㄵ, ㄶ, ㄺ, ㄻ, ㄼ, ㄽ, ㄾ, ㄿ, ㅀ, ㅄ\n  else if(final.includes(s1)) {\n      if (s1 === 'ㄴ') {\n        let c1 = f1_1.indexOf(s2);\n        return f1[c1];\n      }\n      if (s1 === 'ㄹ') {\n        let c1 = f2_1.indexOf(s2);\n        return f2[c1];\n      }\n      if (s1 === 'ㄱ' && s2 === 'ㅅ') {\n        return 'ㄳ';\n      }\n      if (s1 === 'ㅂ' && s2 === 'ㅅ') {\n        return 'ㅄ';\n      }\n  }\n  // could not combine into single block\n  return s1+s2;\n}\n\n/**\n * Takes roman(English) letters as input and maps the letter to the appropriate Korean Jamo(letter)\n * This eliminates the need to have korean set up on your keyboard.\n * @param keyStroke - Returns a single Jamo  (korean letter)\n */\nfunction romanToHangul(keyStroke) {\n  // Parallel arrays mapping english letter to korean letter\n  const engl = [\n      'q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p',\n      'a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\n      'z', 'x', 'c', 'v', 'b', 'n', 'm',\n      'Q', 'W', 'E', 'R', 'T', 'O', 'P' // Caps for doubled letters\n  ];\n  const kr = [\n      'ㅂ', 'ㅈ', 'ㄷ', 'ㄱ', 'ㅅ', 'ㅛ', 'ㅕ', 'ㅑ', 'ㅐ', 'ㅔ',\n      'ㅁ', 'ㄴ', 'ㅇ', 'ㄹ', 'ㅎ', 'ㅗ', 'ㅓ', 'ㅏ', 'ㅣ',\n      'ㅋ', 'ㅌ', 'ㅊ', 'ㅍ', 'ㅠ', 'ㅜ', 'ㅡ',\n      'ㅃ', 'ㅉ', 'ㄸ', 'ㄲ', 'ㅆ', 'ㅒ', 'ㅖ' // Caps for doubled letters\n  ];\n\n  if (engl.includes(keyStroke)) {\n    let x = engl.indexOf(keyStroke);\n    return kr[x];\n  }\n  // Already korean input? Just return\n  // Maybe add detection for other letters that happen to be capital.\n  return keyStroke\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}